---
title: "Lecture 2.3 Introduction to the Tidyverse"
author: "SIPA U6614 | Instructor: Harold Stolper"
date: 
urlcolor: blue
output: 
  html_document:
    toc: TRUE
    toc_depth: 3
    toc_float: TRUE
    number_sections: FALSE
    highlight: tango
    theme: default
    fig_caption: TRUE
    #fig_width = 7 #Default width (in inches) for figures
    #fig_height = 5 #Default height (in inches) for figures
    #html_preview: TRUE #TRUE to also generate an HTML file for the purpose of locally previewing what the document will look like on GitHub.    
    df_print: tibble # Method to be used for printing data frames. Valid values include "default", "kable", "tibble", and "paged". The "default" method uses print.data.frame. 
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

Load packages:
```{r, message=FALSE}
library(tidyverse)
library(gapminder)
```

If you haven't already done so, remember you have to run `install.packages("tidyverse")` before loading the package with the library function.

Resources used to create this lecture:

- https://ozanj.github.io/rclass/lectures/lecture2/lecture2_ucla.pdf
- https://mgimond.github.io/ES218/Week03a.html
- https://stat545.com/dplyr-intro.html


## What is the Tidyverse package?

The [Tidyverse](https://www.tidyverse.org/) is actually a suite of packages. Some of the component packages we'll be relying on in this class include:

* **tibble** for data table formatting
* **dplyr** for data manipulation
* **tidyr** for data tidying
* **ggplot2** for data visualisation
* **readr** for data import

So loading the Tidyverse library actually loads all of the above packages and a few more.


## Data manipulation using dplyr

the dplyr package offers a set of functions for manipulating data that is a bit easier to work with base R functions.

Here are some basic functions we'll work with first:

`dplyr` function   | Description
-------------------|-------------
`filter()`         | Subset rows (observations)
`arrange()`        | Sort rows by values within columns
`select()`         | Subset columns (variables)
`mutate()`         | Add columns
`summarise()`      | Summarize columns

Let's put these functions to work using the gapminder dataset (remember, this dataset is included with the gapminder package).


### filter()

The `filter()` function allows us to subset rows of the data, i.e. filter out observations based on certain criteria.

```{r}
filter(gapminder, country == "Burkina Faso")
```

Let's make sure we understand the terminology behing this sample code chunk: we're calling the `filter` function and passing two arguments to it: the first is the data frame, the second is a conditional statement that determines how the function works. Because it's a conditional statement, me need a `==` operator or R will return an error. Also note that R is case sensitive.

With this approach we haven't created a new object, we just displayed the results of the `filter()` function.

We NEVER want to alter the original object, in this case the gapminder data frame. But we might want to store the filtered data as a new object to work with. We can show the first few observations of the new filtered data frame using the `head()` function, rather than printing the full data frame.

```{r}
burkina <- filter(gapminder, country == "Burkina Faso")
head(burkina)
```

We can add more complicated filtering conditions that rely on the AND (,) and OR (|) operators, if necessary.
```{r}
filter(gapminder, year == 1952 | year == 2007, country == "Burkina Faso")
```


### arrange()

Let's use the `arrange()` function to sort by life expectancy (lifeExp) among all countries in 2007.

```{r}
gap_2007 <- filter(gapminder, year==2007)
gap_2007.sort.asc  <- arrange(gap_2007, lifeExp)
head(gap_2007.sort.asc)
gap_2007.sort.desc  <- arrange(gap_2007, desc(lifeExp))
head(gap_2007.sort.desc)
```


`head()`
`tail()`

### select()

### mutate()

### summarise()


## Combining functions with the pipe operator `%>%`

Suppose we want to subset observations for only African countries in 2007, sort in ascending order of life expectancy, and only include the `country` and `lifeExp` columns.


Why is piping useful?

## Some seful keyboard shortcuts

shortcut description        | Windows       | Mac
----------------------------|---------------|------------
**OPERATORS**               |               |
Insert assignment operator  |	Alt+-	        | Option+-
Insert pipe operator	      | Ctrl+Shift+M  | Cmd+Shift+M
**R MARKDOWN**              |               |
Insert code chunk           |	Ctrl+Alt+I	  | Cmd+Option+I
Knit Document	              | Ctrl+Shift+K	| Cmd+Shift+K
**GENERAL CONTROL**         |               |
Move cursor to Source Editor|	Ctrl+1	      | Ctrl+1
Move cursor to Console	    | Ctrl+2	      | Ctrl+2
Undo	                      | Ctrl+Z	      | Cmd+Z         
Redo	                      | Ctrl+Shift+Z	| Cmd+Shift+Z


